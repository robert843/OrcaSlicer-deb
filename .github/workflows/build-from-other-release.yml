name: Build from external release

on:
  schedule:
    - cron: "0 12 * * *"   # sprawdzaj co 30 minut
  workflow_dispatch:          # ręczne odpalenie

jobs:
  check-and-build:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get latest release from repo B
        id: other_release
        run: |
          latest=$(curl -s https://api.github.com/repos/SoftFever/OrcaSlicer/releases/latest | jq -r .tag_name)
          echo "latest=$latest" >> $GITHUB_OUTPUT

      - name: Check if release already exists in this repo
        id: my_release
        run: |
          exists=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.other_release.outputs.latest }} \
            | jq -r .message)

          if [ "$exists" == "Not Found" ]; then
            echo "new_release=true" >> $GITHUB_OUTPUT
          else
            echo "new_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Download release source
        if: steps.my_release.outputs.new_release == 'true'
        run: |
          url=$(curl -s https://api.github.com/repos/SoftFever/OrcaSlicer/releases/latest | jq -r .tarball_url)
          curl -L "$url" -o source.tar.gz
          mkdir source
          tar -xzf source.tar.gz -C source --strip-components=1

      - name: Get deps
        if: steps.my_release.outputs.new_release == 'true'
        run: |
          cd source
          perl -p -i -e 's/https:\/\/www.mpfr.org\/mpfr-current\/mpfr-4.2.1.tar.bz2/https:\/\/www.mpfr.org\/mpfr-4.2.1\/mpfr-4.2.1.tar.bz2/g' ./flatpak/io.github.softfever.OrcaSlicer.yml ./deps/MPFR/MPFR.cmake 
          perl -p -i -e 's/c56edfacef0a60c0de3e6489194fcb2f24c03dbb550a8a7de5938642d045bd32/17a3e875acece9be40b093361cfef47385d4ef22c995ffbf36b2871f5785f9b8/g' ./deps/TIFF/TIFF.cmake 
          
          # dostosuj do swojego projektu:
          sudo apt-get update
          sudo apt-get install -y autoconf build-essential cmake curl eglexternalplatform-dev \
          extra-cmake-modules file git libcairo2-dev libcurl4-openssl-dev libdbus-1-dev libglew-dev libglu1-mesa-dev \
          libglu1-mesa-dev libgstreamer1.0-dev libgstreamerd-3-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-good1.0-dev \
          libgtk-3-dev libgtk-3-dev libmspack-dev libsecret-1-dev libsoup2.4-dev libssl-dev libudev-dev libwayland-dev \
          libwebkit2gtk-4.1-dev libxkbcommon-dev locales locales-all m4 pkgconf sudo wayland-protocols wget libfuse2t64
          ./BuildLinux.sh -u
          ./BuildLinux.sh -dr
          # po buildzie zakładam katalog "dist/"
      - name: Build project
        if: steps.my_release.outputs.new_release == 'true'
        run: |
          cd source
          ./BuildLinux.sh -sr
          # po buildzie zakładam katalog "dist/"

      - name: Package .deb
        if: steps.my_release.outputs.new_release == 'true'
        run: |
          APP_NAME="OrcaSlicer"
          VERSION="${{ steps.other_release.outputs.latest }}"
          VERSION="${VERSION#v}"
          ARCH="amd64"

          mkdir -p pkg/DEBIAN
          mkdir -p pkg/opt/orca-slicer
          mkdir -p pkg/usr/share/applications/
          mkdir -p pkg/usr/share/icons/hicolor/scalable/apps
          mkdir -p pkg/usr/bin
          
          ln -s /opt/orca-slicer/orca-slicer pkg/usr/bin/orca-slicer
          
          cp -r source/build/package/* pkg/opt/orca-slicer
          cp source/resources/images/OrcaSlicer.svg pkg/usr/share/icons/hicolor/scalable/apps/OrcaSlicer.svg

          cat > pkg/DEBIAN/control <<EOF
          Package: $APP_NAME
          Version: $VERSION
          Section: utils
          Priority: optional
          Architecture: $ARCH
          Maintainer: robert843 <robert843@o2.pl>
          Description: Open source Next-Gen Slicing Software for Precision 3D Prints.
          EOF

          cat > pkg/usr/share/applications/orcaslicer.desktop <<EOF
          [Desktop Entry]
          Name=$APP_NAME
          Comment=3D printing slicer
          Exec=orca-slicer
          Icon=OrcaSlicer
          Terminal=false
          Type=Application
          Categories=Graphics;Engineering;
          EOF

          dpkg-deb --build pkg "${APP_NAME}_${VERSION}_${ARCH}.deb"

      - name: Create release
        if: steps.my_release.outputs.new_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.other_release.outputs.latest }}
          name: "OrcaSlicer ${{ steps.other_release.outputs.latest }}"
          files: "*.deb"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: dist/

  create-gh-page:
      if: ${{ needs.check-and-build.outputs.new_release == 'true' }}
      environment:
        name: github-pages
        url: ${{ steps.deployment.outputs.page_url }}
      runs-on: ubuntu-latest
      needs: check-and-build
      steps:
      - name: Install required packages
        if: steps.my_release.outputs.new_release == 'true'
        run: |
          sudo apt install -y jq createrepo-c coreutils gnupg2 dpkg-dev

      - name: Insert environment variables
        if: steps.my_release.outputs.new_release == 'true'
        run: |
          echo GNUPGHOME="$(mktemp -d /tmp/pgpkeys-XXXXXX)" >> $GITHUB_ENV
          echo REPO_OWNER="$(echo "${GITHUB_REPOSITORY}" | cut -d/ -f1)" >> $GITHUB_ENV
          echo REPO_NAME="$(echo "${GITHUB_REPOSITORY}" | cut -d/ -f2)" >> $GITHUB_ENV

      - name: Import GPG key
        if: steps.my_release.outputs.new_release == 'true'
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.PRIVATE_KEY }}

      - name: Confirm GPG Key loaded
        if: steps.my_release.outputs.new_release == 'true'
        run: |
          gpg --list-keys
          echo "${{ steps.import_gpg.outputs.fingerprint }}"

      - name: Setup Pages
        if: steps.my_release.outputs.new_release == 'true'
        uses: actions/configure-pages@v3

      - name: Build with Jekyll
        if: steps.my_release.outputs.new_release == 'true'
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site

      - name: Set permissions on the _site directory
        if: steps.my_release.outputs.new_release == 'true'
        run: sudo chown -R runner:docker _site

      - name: Build DEB and APT Repos
        if: steps.my_release.outputs.new_release == 'true'
        run: |
          export GPG_FINGERPRINT="${{ steps.import_gpg.outputs.fingerprint }}"
          export ORIGIN="${{ steps.import_gpg.outputs.name }}"
          .github/scripts/build_repos.sh

      - name: Upload artifact
        if: steps.my_release.outputs.new_release == 'true'
        uses: actions/upload-pages-artifact@v3

  deploy:
    if: ${{ needs.check-and-build.outputs.new_release == 'true' }}
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: create-gh-page
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1